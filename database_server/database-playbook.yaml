---
- name: install MySQL
  hosts: all
  become: true
  vars_files:
    - vars.yaml
  tasks:
    - name: Update Repo 
      apt:
        update_cache: yes
    - name: Install MySQL
      apt:
        name: mysql-server
        state: present
    - name: Start and enable MySQL server
      systemd:
        name: mysql
        state: started
        enabled: yes
    - name: Install PyMySQL
      apt:
        name: python3-pymysql
        state: present
          #- name: Check if failure marker exists
          #  stat:
          #    path: /tmp/failure_marker
          #  register: failure_marker
          #- name: Enable password authentication in MySQL
          #  shell:
          #    cmd: > 
          #        sudo mysql -u root -e 
          #        "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY ''; 
          #        FLUSH PRIVILEGES;"
          #  when: failure_marker.stat.exists
          #- name: Create success marker
          #  file:
          #    path: /tmp/failure_marker
          #    state: touch
          #- name: Set root user password
          #  mysql_user:
          #    login_user: root
          #    login_password: ""
          #    user: root
          #    password: "{{ mysql_root_password }}"
          #    host_all: true
          #    state: present
    - name: Disallow anonymous login
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        user: ""
        host_all: true
        state: absent
    - name: Disallow root remote login
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        user: root
        host: "%"
        state: absent
    - name: Allow Access only from specific IP's
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        user: root
        host: "192.168.62.%"
        password: "{{ mysql_root_password }}"
        state: present
    - name: Remove test database
      mysql_db:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: test
        state: absent
    - name: Reload privilege tables
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        user: root
        state: present
    - name: Create a database
      mysql_db:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: "{{ mysql_database }}"
        state: present
    - name: Create a MySQL user
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        user: "{{ mysql_user }}"
        password: "{{ mysql_user_password }}"
        host: "localhost"
        priv: "{{ mysql_database }}.*:ALL"
        state: present
    - name: Configure bind address
      lineinfile:
        path: "/etc/mysql/conf.d/mysql.cnf"
        regexp: "^bind-address"
        line: "bind-address = {{ mysql_bind_address }}"
        backup: yes
      notify:
        - Restart MySQL
  handlers:
    - name: Restart MySQL
      systemd:
        name: mysql
        state: restarted

- name: Setup cronjob
  hosts: db1
  become: yes
  vars_files:
    - vars.yaml
  tags:
    - cronjob play
  tasks:
    - name: Create MySQL credentials files
      copy:
        dest: '/root/.my.cnf'
        content: |
          [client]
          user=root
          password={{ mysql_root_password }}
        mode: '0600'
        owner: root
        group: root
    - name: Create backup directory
      file:
        path: /var/backups/mysql
        state: directory
        mode: '0700'
        owner: root
        group: root
    - name: Create backup script
      copy:
        dest: /usr/local/bin/backup.sh 
        content: |
            #!/bin/bash
            BACKUP_DIR="/var/backups/mysql"
            DATE=$(date +\%F)
            BACKUP_FILE="${BACKUP_DIR}/mysql_backup_${DATE}.sql"

            # Perform MySQL dump without password argument
            mysqldump --defaults-file=/root/.my.cnf --all-databases > $BACKUP_FILE

            # Optionally, remove backups older than 7 days
            find $BACKUP_DIR -type f -name "mysql_backup_*.sql" -mtime +7 -exec rm {} \;
        mode: '0600'
        owner: root
        group: root
    - name: Setup Cronjob
      cron:
        name: "MySQL Nightly Backup"
        minute: 0
        hour: 2
        job: /usr/local/bin/backup.sh 
        state: present

